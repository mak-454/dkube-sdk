# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dkube_client.api_client import ApiClient


class DkubeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def abort_migration(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_migration(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.abort_migration_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.abort_migration_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def abort_migration_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_migration_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method abort_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `abort_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/abort', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datum_one_abort_download(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to abort a download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_abort_download(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datum_one_abort_download_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
        else:
            (data) = self.datum_one_abort_download_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
            return data

    def datum_one_abort_download_with_http_info(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to abort a download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_abort_download_with_http_info(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datum_one_abort_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datum_one_abort_download`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datum_one_abort_download`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datum_one_abort_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/abort', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datum_one_restart_download(self, user, _class, datum, data, **kwargs):  # noqa: E501
        """API to restart a failed datum download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_restart_download(user, _class, datum, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param DatumModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datum_one_restart_download_with_http_info(user, _class, datum, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datum_one_restart_download_with_http_info(user, _class, datum, data, **kwargs)  # noqa: E501
            return data

    def datum_one_restart_download_with_http_info(self, user, _class, datum, data, **kwargs):  # noqa: E501
        """API to restart a failed datum download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datum_one_restart_download_with_http_info(user, _class, datum, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param DatumModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datum_one_restart_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datum_one_restart_download`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datum_one_restart_download`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datum_one_restart_download`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datum_one_restart_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_add_one(self, user, data, **kwargs):  # noqa: E501
        """API to add a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_add_one(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param DatumModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
            return data

    def datums_add_one_with_http_info(self, user, data, **kwargs):  # noqa: E501
        """API to add a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_add_one_with_http_info(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param DatumModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_add_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_delete_by_class(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_delete_by_class(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data7 data: (required)
        :param bool force:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
            return data

    def datums_delete_by_class_with_http_info(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_delete_by_class_with_http_info(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data7 data: (required)
        :param bool force:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'data', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_delete_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_delete_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_delete_by_class`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_delete_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_by_class(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_by_class(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
            return data

    def datums_get_by_class_with_http_info(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get all datums by class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_by_class_with_http_info(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'shared']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_by_class`")  # noqa: E501
        # verify the required parameter 'shared' is set
        if ('shared' not in params or
                params['shared'] is None):
            raise ValueError("Missing the required parameter `shared` when calling `datums_get_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'shared' in params:
            query_params.append(('shared', params['shared']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_metrics(self, user, _class, data, **kwargs):  # noqa: E501
        """API to get metrics of a list of datum  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_metrics(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data9 data: (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_metrics_with_http_info(user, _class, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_metrics_with_http_info(user, _class, data, **kwargs)  # noqa: E501
            return data

    def datums_get_metrics_with_http_info(self, user, _class, data, **kwargs):  # noqa: E501
        """API to get metrics of a list of datum  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_metrics_with_http_info(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data9 data: (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_metrics`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_metrics`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_get_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/metrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_one_by_class(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to get a datums of a class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_by_class(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_one_by_class_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_one_by_class_with_http_info(user, _class, datum, **kwargs)  # noqa: E501
            return data

    def datums_get_one_by_class_with_http_info(self, user, _class, datum, **kwargs):  # noqa: E501
        """API to get a datums of a class. Refer 'DatumClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_by_class_with_http_info(user, _class, datum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_one_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_one_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_one_by_class`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datums_get_one_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_one_version_lineage(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get lineage of a datum version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_lineage(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_one_version_lineage_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_one_version_lineage_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
            return data

    def datums_get_one_version_lineage_with_http_info(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get lineage of a datum version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_lineage_with_http_info(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_one_version_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datums_get_one_version_lineage`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_get_one_version_lineage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/versions/{version}/lineage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_get_one_version_metrics(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get metrics of a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_metrics(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_get_one_version_metrics_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_get_one_version_metrics_with_http_info(user, _class, datum, version, **kwargs)  # noqa: E501
            return data

    def datums_get_one_version_metrics_with_http_info(self, user, _class, datum, version, **kwargs):  # noqa: E501
        """API to get metrics of a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_get_one_version_metrics_with_http_info(user, _class, datum, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str datum: (required)
        :param str version: (required)
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'datum', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_get_one_version_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_get_one_version_metrics`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `datums_get_one_version_metrics`")  # noqa: E501
        # verify the required parameter 'datum' is set
        if ('datum' not in params or
                params['datum'] is None):
            raise ValueError("Missing the required parameter `datum` when calling `datums_get_one_version_metrics`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_get_one_version_metrics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'datum' in params:
            path_params['datum'] = params['datum']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datums/class/{class}/datum/{datum}/versions/{version}/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_publish_one_model(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to publish a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_publish_one_model(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data10 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_publish_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_publish_one_model_with_http_info(user, model, version, data, **kwargs)  # noqa: E501
            return data

    def datums_publish_one_model_with_http_info(self, user, model, version, data, **kwargs):  # noqa: E501
        """API to publish a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_publish_one_model_with_http_info(user, model, version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :param Data10 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_publish_one_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_publish_one_model`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `datums_publish_one_model`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_publish_one_model`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `datums_publish_one_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/models/{model}/versions/{version}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def datums_release_one_model(self, user, model, version, **kwargs):  # noqa: E501
        """API to release a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_release_one_model(user, model, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.datums_release_one_model_with_http_info(user, model, version, **kwargs)  # noqa: E501
        else:
            (data) = self.datums_release_one_model_with_http_info(user, model, version, **kwargs)  # noqa: E501
            return data

    def datums_release_one_model_with_http_info(self, user, model, version, **kwargs):  # noqa: E501
        """API to release a model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.datums_release_one_model_with_http_info(user, model, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str model: (required)
        :param str version: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datums_release_one_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `datums_release_one_model`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `datums_release_one_model`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `datums_release_one_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/models/{model}/versions/{version}/release', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_migration(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_migration(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_migration_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_migration_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def delete_migration_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to terminate migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_migration_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `delete_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_experiment(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiment(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_experiment_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_experiment_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_experiment_with_http_info(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiment_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_pipeline_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/experiments/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_experimentby_id(self, expid, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experimentby_id(expid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expid: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_experimentby_id_with_http_info(expid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_experimentby_id_with_http_info(expid, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_experimentby_id_with_http_info(self, expid, **kwargs):  # noqa: E501
        """API to delete a pipeline experiment by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experimentby_id_with_http_info(expid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expid: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_experimentby_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'expid' is set
        if ('expid' not in params or
                params['expid'] is None):
            raise ValueError("Missing the required parameter `expid` when calling `delete_pipeline_experimentby_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'expid' in params:
            path_params['expid'] = params['expid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/experiments/expid/{expid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_experiments_all(self, **kwargs):  # noqa: E501
        """API to delete all pipeline experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiments_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_experiments_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_experiments_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_pipeline_experiments_all_with_http_info(self, **kwargs):  # noqa: E501
        """API to delete all pipeline experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_experiments_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_experiments_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/experiments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_run(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str exp:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_run_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_run_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_run_with_http_info(self, name, **kwargs):  # noqa: E501
        """API to delete a pipeline run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str exp:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'exp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_pipeline_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'exp' in params:
            query_params.append(('exp', params['exp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/runs/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_run_by_id(self, runid, **kwargs):  # noqa: E501
        """API to delete a pipeline run by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_by_id(runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runid: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_run_by_id_with_http_info(runid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_run_by_id_with_http_info(runid, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_run_by_id_with_http_info(self, runid, **kwargs):  # noqa: E501
        """API to delete a pipeline run by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_run_by_id_with_http_info(runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str runid: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_run_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runid' is set
        if ('runid' not in params or
                params['runid'] is None):
            raise ValueError("Missing the required parameter `runid` when calling `delete_pipeline_run_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runid' in params:
            path_params['runid'] = params['runid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/runs/runid/{runid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_runs_all(self, **kwargs):  # noqa: E501
        """API to delete all pipeline runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_runs_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_runs_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_runs_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_pipeline_runs_all_with_http_info(self, **kwargs):  # noqa: E501
        """API to delete all pipeline runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_runs_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_runs_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/runs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def diag(self, data, **kwargs):  # noqa: E501
        """API to manage admin related operations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diag(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.diag_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.diag_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def diag_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to manage admin related operations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diag_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method diag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `diag`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/admin/diag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dkubeinfo(self, **kwargs):  # noqa: E501
        """API to fetch all the information about dkube installation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dkubeinfo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool authmode:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dkubeinfo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dkubeinfo_with_http_info(**kwargs)  # noqa: E501
            return data

    def dkubeinfo_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all the information about dkube installation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dkubeinfo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool authmode:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authmode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dkubeinfo" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'authmode' in params:
            query_params.append(('authmode', params['authmode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dkubeinfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dlsupport(self, **kwargs):  # noqa: E501
        """API to fetch all the dl support by dkube  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dlsupport(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dlsupport_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dlsupport_with_http_info(**kwargs)  # noqa: E501
            return data

    def dlsupport_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all the dl support by dkube  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dlsupport_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dlsupport" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dlsupport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_p_us_capability(self, source, **kwargs):  # noqa: E501
        """API to get GPU's capability of a user, job, cluster, node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_p_us_capability(source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str value:
        :param str _class:
        :param str user:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_p_us_capability_with_http_info(source, **kwargs)  # noqa: E501
        else:
            (data) = self.g_p_us_capability_with_http_info(source, **kwargs)  # noqa: E501
            return data

    def g_p_us_capability_with_http_info(self, source, **kwargs):  # noqa: E501
        """API to get GPU's capability of a user, job, cluster, node.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_p_us_capability_with_http_info(source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: (required)
        :param str value:
        :param str _class:
        :param str user:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'value', '_class', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_p_us_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `g_p_us_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if '_class' in params:
            query_params.append(('class', params['_class']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/stats/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dvs_config(self, **kwargs):  # noqa: E501
        """API to list dkube version management system config.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dvs_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dvs_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dvs_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dvs_config_with_http_info(self, **kwargs):  # noqa: E501
        """API to list dkube version management system config.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dvs_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dvs_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/dvs/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_job_groups(self, user, **kwargs):  # noqa: E501
        """API to get all job gropus.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_groups(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_job_groups_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_job_groups_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_job_groups_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get all job gropus.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_job_groups_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_job_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_job_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_migration_metadata(self, migration, data, **kwargs):  # noqa: E501
        """API to export a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_migration_metadata(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param Data data: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_migration_metadata_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.get_migration_metadata_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def get_migration_metadata_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to export a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_migration_metadata_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param Data data: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_migration_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `get_migration_metadata`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `get_migration_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_run_lineage(self, user, _class, runid, **kwargs):  # noqa: E501
        """API to get lineage of a run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_run_lineage(user, _class, runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str runid: (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_run_lineage_with_http_info(user, _class, runid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_run_lineage_with_http_info(user, _class, runid, **kwargs)  # noqa: E501
            return data

    def get_one_run_lineage_with_http_info(self, user, _class, runid, **kwargs):  # noqa: E501
        """API to get lineage of a run  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_run_lineage_with_http_info(user, _class, runid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str runid: (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'runid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_run_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_one_run_lineage`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `get_one_run_lineage`")  # noqa: E501
        # verify the required parameter 'runid' is set
        if ('runid' not in params or
                params['runid'] is None):
            raise ValueError("Missing the required parameter `runid` when calling `get_one_run_lineage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'runid' in params:
            path_params['runid'] = params['runid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/runs/{runid}/lineage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_session_key(self, user, **kwargs):  # noqa: E501
        """API to get session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_key(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_session_key_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_session_key_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_session_key_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_session_key_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_session_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/sessionkey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def job_get_collection_all_by_class(self, user, _class, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs of a class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_get_collection_all_by_class(user, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str run:
        :param str template:
        :param str group:
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.job_get_collection_all_by_class_with_http_info(user, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.job_get_collection_all_by_class_with_http_info(user, _class, **kwargs)  # noqa: E501
            return data

    def job_get_collection_all_by_class_with_http_info(self, user, _class, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs of a class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_get_collection_all_by_class_with_http_info(user, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str run:
        :param str template:
        :param str group:
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'run', 'template', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_get_collection_all_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `job_get_collection_all_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `job_get_collection_all_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
        if 'template' in params:
            query_params.append(('template', params['template']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def job_group_add_one(self, user, data, **kwargs):  # noqa: E501
        """API to add a job group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_group_add_one(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobGroupModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.job_group_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
        else:
            (data) = self.job_group_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
            return data

    def job_group_add_one_with_http_info(self, user, data, **kwargs):  # noqa: E501
        """API to add a job group.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.job_group_add_one_with_http_info(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobGroupModel data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_group_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `job_group_add_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `job_group_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobmigration(self, data, **kwargs):  # noqa: E501
        """API to migrate jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobmigration(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data16 data: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobmigration_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobmigration_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def jobmigration_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to migrate jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobmigration_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data16 data: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobmigration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobmigration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_abort_one(self, user, job, _class, **kwargs):  # noqa: E501
        """API to abort a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_abort_one(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_abort_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_abort_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
            return data

    def jobs_abort_one_with_http_info(self, user, job, _class, **kwargs):  # noqa: E501
        """API to abort a single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_abort_one_with_http_info(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_abort_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_abort_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `jobs_abort_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_abort_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/class/{class}/jobs/{job}/abort', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_add_one(self, user, data, **kwargs):  # noqa: E501
        """API to add a new job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_add_one(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobModel data: (required)
        :param str run:
        :param str subclass:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_add_one_with_http_info(user, data, **kwargs)  # noqa: E501
            return data

    def jobs_add_one_with_http_info(self, user, data, **kwargs):  # noqa: E501
        """API to add a new job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_add_one_with_http_info(user, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param JobModel data: (required)
        :param str run:
        :param str subclass:
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'data', 'run', 'subclass']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_add_one`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobs_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
        if 'subclass' in params:
            query_params.append(('subclass', params['subclass']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_delete_one_by_uuid(self, uuid, _class, **kwargs):  # noqa: E501
        """API to delete a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_delete_one_by_uuid(uuid, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str _class: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_delete_one_by_uuid_with_http_info(uuid, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_delete_one_by_uuid_with_http_info(uuid, _class, **kwargs)  # noqa: E501
            return data

    def jobs_delete_one_by_uuid_with_http_info(self, uuid, _class, **kwargs):  # noqa: E501
        """API to delete a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_delete_one_by_uuid_with_http_info(uuid, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :param str _class: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_delete_one_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `jobs_delete_one_by_uuid`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_delete_one_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/class/{class}/uuid/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_by_class(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get jobs of a user by class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_by_class(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :param str run:
        :param str template:
        :param str group:
        :param str all:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_by_class_with_http_info(user, _class, shared, **kwargs)  # noqa: E501
            return data

    def jobs_get_by_class_with_http_info(self, user, _class, shared, **kwargs):  # noqa: E501
        """API to get jobs of a user by class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_by_class_with_http_info(user, _class, shared, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param bool shared: (required)
        :param str run:
        :param str template:
        :param str group:
        :param str all:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'shared', 'run', 'template', 'group', 'all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_get_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_get_by_class`")  # noqa: E501
        # verify the required parameter 'shared' is set
        if ('shared' not in params or
                params['shared'] is None):
            raise ValueError("Missing the required parameter `shared` when calling `jobs_get_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []
        if 'shared' in params:
            query_params.append(('shared', params['shared']))  # noqa: E501
        if 'run' in params:
            query_params.append(('run', params['run']))  # noqa: E501
        if 'template' in params:
            query_params.append(('template', params['template']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'all' in params:
            query_params.append(('all', params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_collection_all(self, user, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_all(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_collection_all_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_collection_all_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def jobs_get_collection_all_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get jobs collection for all jobs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_all_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_collection_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_get_collection_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_collection_one(self, user, _class, job, **kwargs):  # noqa: E501
        """API to get jobs collection for single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_one(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_collection_one_with_http_info(user, _class, job, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_collection_one_with_http_info(user, _class, job, **kwargs)  # noqa: E501
            return data

    def jobs_get_collection_one_with_http_info(self, user, _class, job, **kwargs):  # noqa: E501
        """API to get jobs collection for single job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_collection_one_with_http_info(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_collection_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_get_collection_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_get_collection_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `jobs_get_collection_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/job/{job}/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_get_one_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """API to get a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_one_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_one_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_one_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def jobs_get_one_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """API to get a job by uuid.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_one_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_one_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `jobs_get_one_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/jobs/uuid/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_list_delete_by_class(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete jobs by class. Refer to 'JobClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_delete_by_class(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data11 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_list_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_list_delete_by_class_with_http_info(user, _class, data, **kwargs)  # noqa: E501
            return data

    def jobs_list_delete_by_class_with_http_info(self, user, _class, data, **kwargs):  # noqa: E501
        """API to delete jobs by class. Refer to 'JobClassType' definition for possible values of class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_list_delete_by_class_with_http_info(user, _class, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param Data11 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_list_delete_by_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_list_delete_by_class`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_list_delete_by_class`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `jobs_list_delete_by_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def jobs_start_one(self, user, job, _class, **kwargs):  # noqa: E501
        """API to start an aborted job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_start_one(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_start_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_start_one_with_http_info(user, job, _class, **kwargs)  # noqa: E501
            return data

    def jobs_start_one_with_http_info(self, user, job, _class, **kwargs):  # noqa: E501
        """API to start an aborted job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_start_one_with_http_info(user, job, _class, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :param str _class: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job', '_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_start_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `jobs_start_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `jobs_start_one`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `jobs_start_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/class/{class}/jobs/{job}/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login(self, data, **kwargs):  # noqa: E501
        """API to login into dkube. Unique API key is returned using which user can access dkube apis. API key access will be scoped based on the role of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthModel data: (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.login_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def login_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to login into dkube. Unique API key is returned using which user can access dkube apis. API key access will be scoped based on the role of the user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthModel data: (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logout(self, **kwargs):  # noqa: E501
        """API to logoff from the dkube. The API key will be revoked and invalidated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logout_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.logout_with_http_info(**kwargs)  # noqa: E501
            return data

    def logout_with_http_info(self, **kwargs):  # noqa: E501
        """API to logoff from the dkube. The API key will be revoked and invalidated.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logout" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def logs_get_one(self, user, job, **kwargs):  # noqa: E501
        """API to get logs of a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_get_one(user, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.logs_get_one_with_http_info(user, job, **kwargs)  # noqa: E501
        else:
            (data) = self.logs_get_one_with_http_info(user, job, **kwargs)  # noqa: E501
            return data

    def logs_get_one_with_http_info(self, user, job, **kwargs):  # noqa: E501
        """API to get logs of a job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logs_get_one_with_http_info(user, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method logs_get_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `logs_get_one`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `logs_get_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/{job}/logs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migration_complete(self, migration, data, **kwargs):  # noqa: E501
        """API to notify migration complete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_complete(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migration_complete_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.migration_complete_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def migration_complete_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to notify migration complete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_complete_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migration_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `migration_complete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `migration_complete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/complete', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migration_status(self, migration, data, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migration_status_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.migration_status_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def migration_status_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migration_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `migration_status`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `migration_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migration_status_user(self, migration, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status_user(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migration_status_user_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.migration_status_user_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def migration_status_user_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to send status of migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migration_status_user_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migration_status_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `migration_status_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def model_deploy(self, data, **kwargs):  # noqa: E501
        """API to deploy model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_deploy(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data1 data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.model_deploy_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.model_deploy_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def model_deploy_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to deploy model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.model_deploy_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data1 data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_deploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `model_deploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/model/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notification(self, type, op, data, **kwargs):  # noqa: E501
        """API to post notifications to Dkube API server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification(type, op, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: the resource type that is notified about (required)
        :param str op: the operation type this notification carries (required)
        :param NotificationData data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notification_with_http_info(type, op, data, **kwargs)  # noqa: E501
        else:
            (data) = self.notification_with_http_info(type, op, data, **kwargs)  # noqa: E501
            return data

    def notification_with_http_info(self, type, op, data, **kwargs):  # noqa: E501
        """API to post notifications to Dkube API server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notification_with_http_info(type, op, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: the resource type that is notified about (required)
        :param str op: the operation type this notification carries (required)
        :param NotificationData data: (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'op', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `notification`")  # noqa: E501
        # verify the required parameter 'op' is set
        if ('op' not in params or
                params['op'] is None):
            raise ValueError("Missing the required parameter `op` when calling `notification`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `notification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'op' in params:
            path_params['op'] = params['op']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/notify/{type}/{op}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revoke_session_key(self, user, **kwargs):  # noqa: E501
        """API to renew the session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_session_key(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revoke_session_key_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.revoke_session_key_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def revoke_session_key_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to renew the session key(static jwt token)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revoke_session_key_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_session_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `revoke_session_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/sessionkey', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def source_migration_init(self, migration, data, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.source_migration_init(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.source_migration_init_with_http_info(migration, data, **kwargs)  # noqa: E501
        else:
            (data) = self.source_migration_init_with_http_info(migration, data, **kwargs)  # noqa: E501
            return data

    def source_migration_init_with_http_info(self, migration, data, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.source_migration_init_with_http_info(migration, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param MigrationStatus data: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method source_migration_init" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `source_migration_init`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `source_migration_init`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/source/init', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_tensorboard(self, user, _class, job, **kwargs):  # noqa: E501
        """API to start tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_tensorboard(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
        else:
            (data) = self.start_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
            return data

    def start_tensorboard_with_http_info(self, user, _class, job, **kwargs):  # noqa: E501
        """API to start tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_tensorboard_with_http_info(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `start_tensorboard`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `start_tensorboard`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `start_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/job/{job}/tensorboard/start', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_tensorboard(self, user, _class, job, **kwargs):  # noqa: E501
        """API to stop tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_tensorboard(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_tensorboard_with_http_info(user, _class, job, **kwargs)  # noqa: E501
            return data

    def stop_tensorboard_with_http_info(self, user, _class, job, **kwargs):  # noqa: E501
        """API to stop tensorboard for a given job.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_tensorboard_with_http_info(user, _class, job, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str _class: (required)
        :param str job: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', '_class', 'job']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `stop_tensorboard`")  # noqa: E501
        # verify the required parameter '_class' is set
        if ('_class' not in params or
                params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `stop_tensorboard`")  # noqa: E501
        # verify the required parameter 'job' is set
        if ('job' not in params or
                params['job'] is None):
            raise ValueError("Missing the required parameter `job` when calling `stop_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if '_class' in params:
            path_params['class'] = params['_class']  # noqa: E501
        if 'job' in params:
            path_params['job'] = params['job']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/jobs/class/{class}/job/{job}/tensorboard/stop', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def target_migration_init(self, migration, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.target_migration_init(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param file upfile: The file to upload.
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.target_migration_init_with_http_info(migration, **kwargs)  # noqa: E501
        else:
            (data) = self.target_migration_init_with_http_info(migration, **kwargs)  # noqa: E501
            return data

    def target_migration_init_with_http_info(self, migration, **kwargs):  # noqa: E501
        """API to initiate_migration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.target_migration_init_with_http_info(migration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str migration: (required)
        :param file upfile: The file to upload.
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['migration', 'upfile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method target_migration_init" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'migration' is set
        if ('migration' not in params or
                params['migration'] is None):
            raise ValueError("Missing the required parameter `migration` when calling `target_migration_init`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'migration' in params:
            path_params['migration'] = params['migration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'upfile' in params:
            local_var_files['upfile'] = params['upfile']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/migrations/{migration}/target/init', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokeninfo(self, **kwargs):  # noqa: E501
        """API to fetch all claims for a jwt token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokeninfo(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokeninfo_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tokeninfo_with_http_info(**kwargs)  # noqa: E501
            return data

    def tokeninfo_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch all claims for a jwt token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokeninfo_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokeninfo" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/token/validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_datum_version_model(self, user, uuid, data, **kwargs):  # noqa: E501
        """Update version model info of a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_datum_version_model(user, uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str uuid: (required)
        :param Data6 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_datum_version_model_with_http_info(user, uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_datum_version_model_with_http_info(user, uuid, data, **kwargs)  # noqa: E501
            return data

    def update_datum_version_model_with_http_info(self, user, uuid, data, **kwargs):  # noqa: E501
        """Update version model info of a datum.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_datum_version_model_with_http_info(user, uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :param str uuid: (required)
        :param Data6 data: (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'uuid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_datum_version_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_datum_version_model`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_datum_version_model`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `update_datum_version_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/datum/version/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_capability(self, user, **kwargs):  # noqa: E501
        """API to get capabilities of a user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_capability(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_capability_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_capability_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_capability_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get capabilities of a user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_capability_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/capability', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_collection_one(self, user, **kwargs):  # noqa: E501
        """API to get user collection for single user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_collection_one(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_collection_one_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_collection_one_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_get_collection_one_with_http_info(self, user, **kwargs):  # noqa: E501
        """API to get user collection for single user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_collection_one_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_collection_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `user_get_collection_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user}/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_get_collection_all(self, **kwargs):  # noqa: E501
        """API to get user collection for all users.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_collection_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_get_collection_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_get_collection_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_get_collection_all_with_http_info(self, **kwargs):  # noqa: E501
        """API to get user collection for all users.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_get_collection_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get_collection_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/users/collection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volumes_storage(self, **kwargs):  # noqa: E501
        """API to fetch information about storage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_storage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volumes_storage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.volumes_storage_with_http_info(**kwargs)  # noqa: E501
            return data

    def volumes_storage_with_http_info(self, **kwargs):  # noqa: E501
        """API to fetch information about storage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volumes_storage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volumes_storage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
